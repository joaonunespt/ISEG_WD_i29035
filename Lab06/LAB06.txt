------------
Pergunta 1:
------------

	Projeto_1
-----------------
	No Projecto 1 a implementação do login é efectuado através do Flask-WTF, que é uma extensão Flask que ajuda a utilizar a biblioteca WTForms numa aplicação Flask.
	O WTForms é uma biblioteca flexível de validação e renderização de forms para desenvolvimento web em Python, suportando validação de dados, proteção CSRF, internacionalização (I18N), entre outras funcionalidades.
	Neste caso, o WTForms é usado no "forms.py" (na classe "LoginForm") para definir uma coleção de "class variables" para renderizar o campo de texto ("Username"), o campo da password ("Password") e o botão de submit ("Login") com os respectivos tipos (StringField; PasswordField; SubmitField)
	O WTForms também fornece validação de dados poderosa usando diferentes validadores, como os que estão presentes nos campos de "Username" e "Password", que validam os dados que o utilizador
	envia atendem a determinados critérios - como por exemplo garantir que os dados enviados são "required" ou tenham um determinado "comprimento".

	Na função "login()" é instanciada a classe LoginForm() (que representa o formulário da web) e gravada essa instância numa variável chamada "form". 
	De seguida, é retornada uma chamada para a função render_template(), passando-lhe o template file "login.html" e a instância do formulário (assim como qualquer eventual erro resultante da validação
	que é efectuada à existência do utilizador e respectiva password).
	
	Caso o login seja efectuado com sucesso, um objeto de sessão é usado para rastrear os dados da sessão (que é um dicionário que contém um par chave-valor das variáveis de sessão e seus valores associados).
	A "sessão" pode ser definida como a duração pela qual um utilizador efetua login no servidor e logout.
	
	No Projecto 1 o registo do utilizador é efectuado através de um form html "normal", sem recorrer ao WTForms.
	Todos os "controllers" e "Views" estão no ficheiro "app.py"
	
	
	Projeto_2
-----------------
	No Projecto 2 foi implementada uma arquitectura MVC.
	
	Nas "Views" foram implementadas as views "register" e "login" que usam os templates "register.html" e "login.html", respectivamente.
	Nos "Controllers" foi implementado um Blueprint "controller" e as funções "register", "login" e "logout"
	Nos "Models" foi implementada a lógica de dados: "register_user", "get_user", 
	
	O controller "register" invoca o model "register_user" para inserir um novo utilizador na base de dados (e retorna a view "register)
	O controller "login" invoca o model "get_user" e caso o email e password do utilizador exista na base de dados então cria uma sessão para o utilizador (e retorna a view "login)  
	O controller "logout" simplesmente fecha a sessão do utilizador.
	
	No Projecto 2 os "controllers", "Models" e "Views" estão em ficheiros separados

------------
Pergunta 2:
------------
	